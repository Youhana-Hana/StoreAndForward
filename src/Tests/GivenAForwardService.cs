namespace Tests
{
    using Microsoft.VisualStudio.TestPlatform.UnitTestFramework;
    using MoqaLate.Autogenerated;
    using StoreAndForward;
    using System.Collections.Generic;
    using System.Net;
    using System.Threading;

    [TestClass]
    public class GivenAForwardService
    {
        private ForwardService ForwardService { get; set; }

        private Store Store { get; set; }

        private NetworkStateMonitorServiceMoqaLate NetworkStateMonitorService { get; set; }

        private HttpClientMoqaLate HttpClient { get; set; }

        [TestInitialize]
        public void Setup()
        {
            this.HttpClient = new HttpClientMoqaLate();
            
            this.Store = new Store();

            this.NetworkStateMonitorService = new NetworkStateMonitorServiceMoqaLate();

            this.ForwardService = new ForwardService(this.Store, this.NetworkStateMonitorService, this.HttpClient);
        }

        [TestCleanup]
        public void TearDown()
        {
            this.Store.Delete();
        }

        [TestMethod]
        public void WhenConstructingShouldNotThrow()
        {
            Assert.IsNotNull(this.ForwardService);
        }

        [TestMethod]
        public void WhenConstructingShouldInitialize()
        {
            Assert.IsNotNull(this.ForwardService.Store);
            Assert.IsNotNull(this.ForwardService.NetworkStateMonitorService);
            Assert.IsNotNull(this.ForwardService.HttpClient);
            Assert.IsNotNull(this.ForwardService.WaitHandles);
            Assert.AreEqual(2, this.ForwardService.WaitHandles.Length);
        }

        [TestMethod]
        public void WhenCallingStartShouldResetEvents()
        {
            this.ForwardService.Start();
            Thread.Sleep(200);
            var wait0 = this.ForwardService.WaitHandles[0].WaitOne(0);
            var wait1 = this.ForwardService.WaitHandles[1].WaitOne(0);
            this.ForwardService.Stop();

            Assert.IsFalse(wait0);
            Assert.IsFalse(wait1);
        }

        [TestMethod]
        public void WhenCallingStartShouldStartThread()
        {
            this.ForwardService.Start();
            Thread.Sleep(200);
            this.ForwardService.Stop();

            Assert.IsNotNull(this.ForwardService.Thread);
        }

        [TestMethod]
        public void WhenCallingStopShouldResetEvents()
        {
            this.ForwardService.Start();
            Thread.Sleep(200);
            this.ForwardService.Stop();

            Assert.IsFalse(this.ForwardService.WaitHandles[0].WaitOne(0));
            Assert.IsTrue(this.ForwardService.WaitHandles[1].WaitOne(0));
        }

        //[TestMethod]
        //public void WhenCallingStartStopStartShouldResetEvents()
        //{
        //    this.ForwardService.Start();
        //    this.ForwardService.Stop();
        //    this.ForwardService.Start();
        //    Thread.Sleep(100);

        //    Assert.IsFalse(this.ForwardService.WaitHandles[0].WaitOne(0));
        //    Assert.IsFalse(this.ForwardService.WaitHandles[1].WaitOne(0));
        //}

        [TestMethod]
        public void WhenCallingStartAndMessageAddedShouldForwardIt()
        {
            var message = this.GetMessage();
            this.Store.Add(message);
            Assert.AreEqual(1, this.Store.Count);

            this.ForwardService.Start();
            Thread.Sleep(200);
            this.ForwardService.Stop();

            Assert.AreEqual(1, this.HttpClient.PostTimesCalled());
            Assert.AreEqual(0, this.Store.Count);
        }

        [TestMethod]
        public void WhenCallingStartThenMessageAddedShouldForwardIt()
        {
            var message = this.GetMessage();
            
            this.ForwardService.Start();
            Thread.Sleep(200);
            
            this.Store.Add(message);
            Thread.Sleep(200);
            
            this.ForwardService.Stop();

            Assert.AreEqual(1, this.HttpClient.PostTimesCalled());
            Assert.AreEqual(0, this.Store.Count);
        }

        [TestMethod]
        public void WhenCallingStartAndTemporaryFailedToForwardShouldNotRemoveMessage()
        {
            this.HttpClient.PostSetReturnValue(PostResult.TemporaryError);

            var message = this.GetMessage();

            this.ForwardService.Start();
            Thread.Sleep(200);

            this.Store.Add(message);
            Thread.Sleep(200);

            this.ForwardService.Stop();

            Assert.AreEqual(1, this.HttpClient.PostTimesCalled());
            Assert.AreEqual(1, this.Store.Count);
        }

        [TestMethod]
        public void WhenCallingStopShouldUnregisterFromMessagesEvents()
        {
            this.ForwardService.Start();
            var message = this.GetMessage();
            this.Store.Add(message);
            Thread.Sleep(200);
            this.ForwardService.Stop();
            var lastMessage = this.Store.Add(message);

            Assert.IsFalse(this.ForwardService.WaitHandles[0].WaitOne(0));
            Assert.IsTrue(this.ForwardService.WaitHandles[1].WaitOne(0));
            Assert.AreEqual(1, this.Store.Count);
            this.Store.Remove(lastMessage);
            this.Store.Delete();
        }

        private IMessage GetMessage()
        {
            WebHeaderCollection headers = new WebHeaderCollection();
            headers["H1"] = "V1";
            headers["H2"] = "V2";

            return new Message("ContentType", "Body", new System.Uri("http://www.test.com"), headers);
        }
    }
}
